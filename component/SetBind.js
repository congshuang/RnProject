/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, { Component } from 'react'import {    Text,    View,    Image,    Dimensions,    TouchableOpacity,    ScrollView,    ListView,    FlatList,    ActivityIndicator,    ToastAndroid,    Alert} from 'react-native'import Swiper from 'react-native-swiper'import Utils from '../Utils/util'import  Storage from '../Utils/storage';const styles = {    container: {        flex: 1,        backgroundColor:'#E3E3E3'    },    indicator:{        flex: 1,        alignItems:'center',        justifyContent:'center'    },    wrappert: {        backgroundColor:'#fff',        flexWrap:'wrap',    //设置换行显示        borderBottomWidth: Utils.pixel,    },    inner:{        height:55,        width:Utils.size.width/4-2,        alignItems:'center',        justifyContent:'center',        marginTop:5,        marginBottom:10,        position:'relative'    },    imageItem:{        height:30,        width:30,    },    textItem:{        marginTop:5,        height:20,        fontSize:16,        color:'#000'    },    top:{        height:50,        width:Utils.size.width,        alignItems:'center',        borderBottomWidth: Utils.pixel,        borderBottomColor:'#ccc',        flexDirection:'row'    },    title:{        fontSize:19,        paddingLeft:10,        width:Utils.size.width-100,        height:25,        color:'#196be6'    },    images:{        height:25,        width:25,        marginLeft:10    },    listViewStyle:{        flexDirection:'row', //设置横向布局        flexWrap:'wrap',    //设置换行显示        alignItems: 'flex-start',        justifyContent: 'space-between'    },    imgs:{        width:15,        height:15,        position:'absolute',        top:0,        right:20,    }}var  data1=[];var data2 =[];var  propsty ="";export default class SetBind extends Component<{}>  {    constructor(props) {        super(props);        propsty = props;        this.state = {            type: this.props.type,            dataSource: [],            isShow:false,            dataState: [],        };    }    static navigationOptions = ({navigation, screenProps,that=this}) => ({        // 这里面的属性和App.js的navigationOptions是一样的。        headerTitle: '编辑',        gestureResponseDistance: {horizontal: 300},        //设置跳转页面左侧返回箭头后面的文字，默认是上一个页面的标题        headerBackTitle: null,        //顶部标题栏的样式        headerStyle: {            backgroundColor:'#0A66D4',            height:50        },        //顶部标题栏文字的样式        headerTitleStyle: {            color:'#fff',            fontSize: 19,            alignSelf: 'center',        },        //返回按钮的颜色        headerTintColor: 'white',        headerRight: (            <Text style={{color: 'white', marginRight: 13}}                  onPress={() => navigation.state.params ? navigation.state.params.menuClick() : null}>完成            </Text>),    });    menuClick(){        Alert.alert(            '编辑',            '确定保存编辑',            [                {text: '取消', onPress: () => console.log('Cancel Pressed'), style: 'cancel'},                {text: '确定', onPress: () => {                    Storage.get("name").then((tags) =>{                        let formData = new FormData();                        for(let i=0;i<data1.length;i++){                            formData.append("menus",data1[i].id);                        }                        formData.append("username",tags);                        Utils.post("http://219.145.160.7:8180/oa/mymenus/add",formData,function (data) {                            ToastAndroid.show(data.message,ToastAndroid.LONG);                            propsty.navigation.state.params.callBackFun(data1);                            propsty.navigation.goBack(null)                        },function (data) {                            ToastAndroid.show('加载失败...', ToastAndroid.SHORT);                        });                    });                }},            ],            { cancelable: false }        )    }    submit(){    }    _flatList;    _flatList1;    _renderItem = (rowData) => {        return <TouchableOpacity style={styles.inner}  key={rowData.item.id} >            <Image source={{uri:rowData.item.imgURL}} style={styles.imageItem} resizeMode='contain'/>            <Text style={styles.textItem}>{rowData.item.name}</Text>            <Image/>        </TouchableOpacity>;    }    _renderItemBottom = (rowData) => {        return <TouchableOpacity style={styles.inner}  key={rowData.item.id} onPress={this._showList.bind(this,rowData.item.id,rowData.item.status)}>            <Image source={{uri:rowData.item.imgURL}} style={styles.imageItem} resizeMode='contain'/>            <Text style={styles.textItem}>{rowData.item.name}</Text>            {                rowData.item.status?                    (<Image source={require('../state/icon.png')} style={styles.imgs} resizeMode='contain'/>):                    (<Image style={styles.imgs} source={require('../state/icons.png')}  resizeMode='contain'/>)            }        </TouchableOpacity>;    }    render () {        return (            <View style={styles.container}>                {                    this.state.isShow?                        (<View style={styles.container}>                            <View style={styles.wrappert}>                                <View style={styles.top}>                                    <Image source={require('../state/gw.png')} resizeMode="contain" style={{width:26,height:26,marginLeft:10}}/>                                    <Text style={styles.title}>我的应用</Text>                                </View>                                <View>                                    <FlatList                                        ref={(flatList)=>this._flatList = flatList}                                        renderItem={this._renderItem}                                        onEndReachedThreshold={0}                                        numColumns ={4}                                        data={this.state.dataSource}>                                    </FlatList>                                </View>                            </View>                            <ScrollView style={[styles.container,{marginTop:10}]}>                                <View style={styles.wrappert}>                                    <View style={styles.top}>                                        <Image source={require('../state/gw.png')} resizeMode="contain" style={{width:26,height:26,marginLeft:10}}/>                                        <Text style={styles.title}>全部应用</Text>                                </View>                                    <View>                                        <FlatList                                            ref={(flatList)=>this._flatList1 = flatList}                                            renderItem={this._renderItemBottom}                                            onEndReachedThreshold={0}                                            numColumns ={4}                                            data={this.state.dataState}>                                        </FlatList>                                    </View>                                </View>                             </ScrollView>                        </View>):                        (<ActivityIndicator                            animating={true}                            style={styles.indicator}                            color={'#196be6'}                            size="large"                        />)                }            </View>        )    }    componentDidMount(){        this.props.navigation.setParams({            menuClick: this.menuClick,        });        data1 = this.props.navigation.state.params.datas;        let _this = this;        Storage.get("name").then((tags) =>{            let tag = "http://219.145.160.7:8180/"+tags+"/oa/allmenus";            Utils.get(tag, function(data){                for(var i=0;i<data.length;i++){                    var node = data[i].nodeList;                    for(var j=0;j<node.length;j++){                        data2.push(node[j]);                    }                }                _this.setState({                    dataState: data2,                    dataSource: data1,                    isShow:true                });            }, function(err){            });        })    }    _showList(title,text){        var s1 = [];        for(var j=0;j<data1.length;j++){            s1.push(data1[j]);        }        var s2 = [];        for(var j=0;j<data2.length;j++){            s2.push(data2[j]);        }        var sources = {};        if(s1.length >=12 &&text ==true){            ToastAndroid.show("已填满",ToastAndroid.LONG);        }else {            for(var i = 0;i<s2.length;i++){                if(title == s2[i].id){                    sources = s2[i];                    s2[i].status = !s2[i].status;                    break;                }            }            if(text ==true){                s1.push(sources);            }else {                for(var i = 0;i<s1.length;i++){                    if(title == s1[i].id){                        s1.splice(i, 1);                        break;                    }                }            }            data1 =s1;            data2 = s2;            this.setState({                dataState: s2,                dataSource: s1,            });        }    }}