/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, { Component } from 'react';import {    Platform,    StyleSheet,    Text,    View,    ToolbarAndroid,    ScrollView,    ListView,    Image,    TouchableOpacity} from 'react-native';import Storage  from '../Utils/storage';import TWebView from '../view/webviews'import { GiftedChat ,Send} from 'react-native-gifted-chat';import  Util from '../Utils/util';const nearByURL = 'http://219.145.160.7:8381/index.html';import Header from './Header';{/**/}export default class ChatBoxGrid extends Component<{}> {    constructor(props){        super(props);        let socket = this.props.navigation.state.params.socket;        let id = this.props.navigation.state.params.id;        this.state = {            messages: [],            socket:socket,            user:{},            id:"",            uid:id,            typingText:''        };    }    static navigationOptions = ({navigation, screenProps}) => ({        // 这里面的属性和App.js的navigationOptions是一样的。        headerTitle: '  群聊',        gestureResponseDistance: {horizontal: 300},        //设置跳转页面左侧返回箭头后面的文字，默认是上一个页面的标题        headerBackTitle: null,        //顶部标题栏的样式        headerStyle: {            backgroundColor:'#0A66D4',            height:50        },        //顶部标题栏文字的样式        headerTitleStyle: {            color:'#fff',            fontSize: 19,            alignSelf: 'center',        },        //返回按钮的颜色        headerTintColor: 'white',        headerRight: (<View/>)        //设置顶部导航栏左边的视图        //设置顶部导航栏左边的视图  和 解决当有返回箭头时，文字不居中    });    render() {        return (            <GiftedChat                messages={this.state.messages}                onSend={(messages) => this.onSend(messages)}                isAnimated={true}                placeholder="请输入..."                showUserAvatar={true}                loadEarlier={true}                dateFormat="YYYY-MM-DD"                timeFormat="MM-DD"                renderAvatarOnTop={true}                renderSend={this.renderSend.bind(this)}                user={this.state.user}            />        );    }    renderSend(props) {        return (            <Send                {...props}            >                <View style={{marginRight: 15, marginBottom: 10}}>                    <Text style={{fontSize:17,color:'#196be6'}}>发送</Text>                </View>            </Send>        );    }    onSend(messages = []) {        this.setState((previousState) => ({            messages: GiftedChat.append(previousState.messages, messages),        }));        this.sendMsg(messages[0].text,true)    }    sendMsg(msg,isGroup){        let seuser = this.state.id;        let reuser = this.state.uid;        // var message = new proto.Model();        // var content = new proto.MessageBody();        var message = {};        var content = {};        // message.setMsgtype(4)        message.msgtype = 4;        // message.setCmd(5);        message.cmd = 5;        if(!!isGroup){            // message.setGroupid(reuser);//群组            message.groupid = reuser;        }else{            //   message.setReceiver(reuser);//机器人ID默认为0            message.receiver = reuser;        }        // message.setToken(seuser);        message.token=seuser;        // message.setSender(seuser);        message.sender=seuser;        // content.setContent(msg);        content.content = msg;        // content.setType(0);        content.type = 0;        // message.setContent(content);        message.content = content;        this.state.socket.send(JSON.stringify(message));        //  message.setContent(content.serializeBinary())        // socket.send(message.serializeBinary());    }    onReceive(text,time,id) {        var _this = this;        this.setState((previousState) => {            return {                messages: GiftedChat.append(previousState.messages, {                    _id: id,                    text: text,                    createdAt: time,                    user: {                        _id: id,                        name: "test",                        avatar: 'http://pic.sc.chinaz.com/Files/pic/pic9/201711/zzpic8396_s.jpg',                    },                }),            };        });    }    componentWillMount() {        let _this = this;        Storage.get("user_pic").then((tags) =>{            let path ="";            if(tags == null){                path = 'http://pic.sc.chinaz.com/Files/pic/pic9/201711/zzpic8396_s.jpg'            }else{                path ="http://219.145.160.7:81/"+tags;            }            Storage.get("id").then((id) =>{                Storage.get("name").then((name) =>{                    _this.setState({                        user:{                            _id: id,                            name: 'name',                            avatar: path,                        },                        id:id                    })                });            });        });    }    componentDidMount() {        this._fetchData();    }    _fetchData(){        this.state.socket.binaryType = "arraybuffer";        let currentId = this.state.id;        this.state.socket.onmessage = (event) => {            if (typeof event.data == 'string'){                let msg = JSON.parse(event.data);      //如果后端发送的是二进制帧（protobuf）会收到前面定义的类型                //心跳消息                if(msg.cmd==2){                    //发送心跳回应                    let message1 = {};                    message1.cmd=1;                    this.state.socket.send(JSON.stringify(message1));                }else if(msg.cmd==5){                    //显示非自身消息                    if(msg.sender!=currentId){                        //不显示用户组消息                        let msgCon =  msg.content;                        if(msg.groupid!=null||msg.groupid.length>=1){                            this.onReceive(msgCon.content,msg.timestamp,msg.sender)                        }                    }                }            }else {                var data = event.data;                //后端返回的是文本帧时触发            }        };        //收到消息后    }}const styles = StyleSheet.create({    container: {        flex: 1,        backgroundColor: '#F5FCFF',    },    item:{        width:Util.size.width,        height:50,        paddingLeft:10,        borderBottomWidth: Util.pixel,        borderBottomColor:'#ccc',        flexDirection:'row',        alignItems:'center'    },    image:{        width:40,        height:40,        borderRadius:20    },    img:{        width:20,        height:20,        marginRight:10    },    text:{        fontSize:18,        fontWeight:'100',        width:Util.size.width-130    },    text1:{        fontSize:16,        fontWeight:'100',        width:40    }});