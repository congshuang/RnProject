/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, { Component } from 'react';import {    Platform,    StyleSheet,    Text,    View,    ScrollView,    Image,    TouchableOpacity,    ListView,    ToastAndroid,    ActivityIndicator,    RefreshControl} from 'react-native';import  Storage from '../Utils/storage';import  Util from '../Utils/util';import Header from './Header';var that ='';export default class Contacts extends Component<{}> {    constructor(props){        super(props);        let ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});        this.state = {             url:'',            isShow:true,            dataSource: ds.cloneWithRows([]),            refreshing:false        };    }    render() {        return (            <View style={{flex:1,backgroundColor:'#F5FCFF'}}>                <Header navigation={this.props.navigation} isShowLeft={false} title="督办"/>                <View style={styles.itemtop}>                    <View style={styles.text1}><Text style={styles.color}>办件名称</Text></View>                    <View style={styles.text2}><Text style={styles.color}>督办</Text></View>                </View>                <ScrollView style={styles.container}                            refreshControl={                                <RefreshControl                                    refreshing={this.state.refreshing}                                    onRefresh={this._onRefresh.bind(this)}                                    colors={['#999999']}                                    progressBackgroundColor="#196BE6"                                />                            }                >                    {                        this.state.isShow?                            (<ActivityIndicator animating={true} style={[{height: 100},styles.loadding]} size="large" color="#196BE6"/>)                            :                            (                                <ListView dataSource={this.state.dataSource} enableEmptySections={true}                                          renderRow={(rowData) =>                                              (                                                  <TouchableOpacity style={[styles.item, styles.row]} onPress={this._showDetail.bind(this, rowData.id,rowData.name)}>                                                      <Text style={styles.text} numberOfLines={1}>{rowData.name}</Text>                                                      <Image source={require('../state/dbtn.png')} style={styles.images} resizeMode="contain"/>                                                  </TouchableOpacity>                                              )                                          }/>                            )                    }                </ScrollView>            </View>        );    }    _showDetail(id,name){        this.props.navigation.navigate('Detail', {id: id,name:name,        callback:this.callback});    }    _onRefresh(){        var self = this;        this.setState({refreshing: true});        this._fetchData();    }    callback(){        that.setState({            isShow:true,        });        Storage.get("name").then((tags) =>{            let tag = "http://219.145.160.7:8180/"+tags+"/chase?page=0&size=20";            let ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});            Util.get(tag, function(data){                let obj = data;                that.setState({                    url:tag,                    isShow:false,                    dataSource: ds.cloneWithRows(obj),                });            }, function(err){                /*alert("服务异常,正在紧急修复,请耐心等待")*/            });        })    }    _fetchData(){        let self = this;        that = this;        Storage.get("name").then((tags) =>{            let tag = "http://219.145.160.7:8180/"+tags+"/chase?page=0&size=20";            let ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});            Util.get(tag, function(data){                let obj = data;                self.setState({                    url:tag,                    isShow:false,                    dataSource: ds.cloneWithRows(obj),                    refreshing: false                });            }, function(err){                /*alert("服务异常,正在紧急修复,请耐心等待")*/            });        })    }    componentDidMount(){        this._fetchData();    }}const styles = StyleSheet.create({    container: {        flex: 1,        backgroundColor: '#fff',    },    itemtop:{        height:40,        marginTop:10,        width:Util.size.width,        backgroundColor: '#fff',        flexDirection:'row',        borderBottomWidth: Util.pixel,        borderBottomColor:'#ccc',        borderTopWidth: Util.pixel,        borderTopColor:'#ccc',    },    loading:{        flex: 1,        justifyContent: 'center',        alignItems: 'center',    },    text1:{      width:(Util.size.width-80),        height:40,        alignItems:'center',        justifyContent:'center',    },    color:{        color:'#858D9C',        fontSize:19,    },    text2:{        width:80,        height:40,        borderLeftWidth: Util.pixel,        borderLeftColor:'#ccc',        alignItems:'center',        justifyContent:'center',    },    item:{        height:40,        borderBottomWidth: Util.pixel,        borderBottomColor:'#ccc',        alignItems:'center'    },    row:{        flexDirection: 'row'    },    img:{        height:30,        width:30,        marginLeft:10,    },    text:{        marginLeft:10,        color:'#00171b',        fontSize:16,        width:(Util.size.width-80),    },    top:{        width:Util.size.width,        height:40,        justifyContent:'center',        borderBottomWidth: Util.pixel,        borderBottomColor:'#ccc',    },    title:{        fontSize:16,        paddingLeft:20    },    images:{        height:30,        width:50,        margin:5    }});