/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, { Component } from 'react'import {    Text,    View,    Image,    Dimensions,    TouchableOpacity,    FlatList,    ToastAndroid} from 'react-native'import Swiper from 'react-native-swiper'import Utils from '../Utils/util'import  Storage from '../Utils/storage';const styles = {    wrapper: {        flex:1,        backgroundColor:'#fff',    },    container: {        flex: 1,        backgroundColor:'#E3E3E3'    },    indicator:{        flex: 1,        alignItems:'center',        justifyContent:'center'    },    wrappert: {        backgroundColor:'#fff',        flexWrap:'wrap',    //设置换行显示        borderBottomWidth: Utils.pixel,    },    inner:{        height:55,        width:Utils.size.width/4-2,        alignItems:'center',        justifyContent:'center',        marginTop:5,        marginBottom:10,        position:'relative'    },    imageItem:{        height:30,    },    textItem:{        marginTop:5,        height:20,        fontSize:16,        color:'#000'    },    top:{        height:40,        width:Utils.size.width,        borderBottomWidth: Utils.pixel,        borderBottomColor:'#ccc',        flexDirection:'row',        alignItems:'center',    },    title:{        fontSize:19,        paddingLeft:5,        width:Utils.size.width-120,        height:25,        color:'#196be6'    },    images:{        height:25,        width:25,        marginLeft:10    },    listViewStyle:{        flexDirection:'row', //设置横向布局        flexWrap:'wrap',    //设置换行显示        alignItems: 'flex-start',        justifyContent: 'space-between'    },    imgs:{        height:16,        minWidth:16,        position:'absolute',        top:10,        right:15,        borderRadius:8,        backgroundColor:'red',        color:'#fff',        textAlignVertical:'center',        textAlign: 'center',        alignItems: 'flex-start',        lineHeight:15,        paddingLeft:1,        paddingRight:1    },tcls:{        flexDirection:'row',height:25    }}let _this = {};export default class CenterComponent extends Component<{}>  {    constructor(props) {        super(props);        _this = this;        this.state = {            data:[]        };    }    _flatList;    _renderItem = (rowData) => {        return <TouchableOpacity style={styles.inner}  key={rowData.index}  onPress={this._showList.bind(this,rowData.item.link,rowData.item.todoCount,rowData.item.id)}>            <Image source={{uri:rowData.item.imgURL}} style={{width:30,height:30}} resizeMode='contain'/>            <Text style={styles.textItem}>{rowData.item.name}</Text>            {                this.isShow(rowData.item.todoCount)?                    (<Text style={styles.imgs}>{rowData.item.todoCount}</Text>):                    (<View/>)            }        </TouchableOpacity>;    }    render () {        return (            <View style={styles.wrapper}>                <View style={styles.top}>                    <Image source={require('../state/gw.png')} resizeMode="contain" style={{width:26,height:26,marginLeft:15}}/>                    <Text style={styles.title}>个人</Text>                    <TouchableOpacity style={styles.tcls} onPress={this._onSetBind.bind(this, 'SetBind')}>                        <Text style={{fontSize:17,color:'#646a71'}}>编辑</Text>                        <Image source={require('../state/yjt.png')} style={styles.images} resizeMode="contain"/>                    </TouchableOpacity>                </View>                <View style={{paddingBottom:10,paddingTop:10}}>                    <FlatList                        ref={(flatList)=>this._flatList = flatList}                        renderItem={this._renderItem}                        onEndReachedThreshold={0}                        numColumns ={4}                        data={this.state.data}>                    </FlatList>                </View>            </View>        )    }    _onRenderView(){        return view;    }    isShow(num){        if(num == null){            return false;        }        return true;    }    _showList(url,count,id){        if(id == 147){            this.props.navigation.navigate('Pending',{                callback:((data) =>{this.setdata(data)})            });        }else {            count = this.isShow(count);            this.props.navigation.navigate('Tcwebview', {                url:url,                id:count,                callback:((data) =>{this.setdata(data)}),            });        }    }    setdata(data){        this.setState({            data:data        });    }    _onSetBind(demo){        this.props.navigation.navigate(demo,{            callBackFun:((data) =>{this.setdata(data)}),                datas:this.state.data});    }    componentDidMount(){        Storage.get("name").then((tags) =>{            let tag = "http://219.145.160.7:8180/"+tags+"/oa/mymenus";            Utils.get(tag, function(data){                _this.setState({                    data:data                });            }, function(err){                ToastAndroid.show("服务异常,正在紧急修复,请耐心等待",ToastAndroid.LONG);            });        })    }}